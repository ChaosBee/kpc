import Button from 'components/button';
import Link from 'components/link';
import Badge from 'components/badge';
import {_$} from 'kpc/components/utils';

const Article = self.get('Article');
const language = Article.language;

let currentNav = {};
let demos = self.get('demos') || [];

function Catalog(props) {
    let isEmpty = true;

    const lis = __u.map(props.value, (value) => {
        if (!value.disabled) isEmpty = false;
        return <li
            class={{ {
                active: (() => {
                    const path = self.path + '/';
                    if (value.url === path) {
                        currentNav = value;
                        return true;
                    }
                })()
            } }}
            v-if={{ !value.disabled }}
        >
            <Link href={{ `${process.URL_PREFIX}${value.url}` }}>
                {{ do {
                    const matches = value.path.match(/components\/([^\/]+)/);
                    if (matches) {
                        const name = matches[1];
                        [
                            name[0].toUpperCase() + name.substring(1),
                            language !== 'en-US' ? <span>{{ value.title }}</span> : undefined,
                        ];
                    } else {
                        if (value.title === '更新日志' || value.title === 'Change Log') {
                            <Badge disabled={{ !!self.get('hasRead') }}>{{ value.title }}</Badge>
                        } else {
                            value.title;
                        }
                    }
                } }}
            </Link>
        </li>
    });
    if (isEmpty) return;
    return <div class="catalog-section">
        <h5 v-if={{ props.key !== undefined }}>{{ props.key }}</h5>
        <ul>{{ lis }}</ul>
    </div>
}

const sidebar = Article.sidebar;
const _sidebar = [];
if (sidebar) {
    if (sidebar.undefined) {
        _sidebar.push({
            key: undefined,
            value: sidebar.undefined
        });
    }
    for (let key in sidebar) {
        if (key !== 'undefined') {
            _sidebar.push({
                key,
                value: key !== '组件' || key !== 'Components' ? 
                    sidebar[key] :
                    sidebar[key].sort((a, b) => {
                        return a.path > b.path ? 1 : -1;
                    })
            });
        }
    }
}

<t:parent navIndex="document" class="document-page fixed-aside" {{ ...scope }}>
    <b:content>
        <aside class={{ {expanded: self.get('expanded')} }}>
            <div class="aside-wrapper">
                <Catalog key={{ value.key }} value={{ value.value }} v-for={{ _sidebar }} />
                <div class="aside-border transition"></div>
            </div>
            <Button icon
                ev-click={{ self.set.bind(self, 'expanded', !self.get('expanded')) }}
            >
                <i class="k-icon ion-android-menu"></i>
            </Button>
        </aside>
        <article>
            <div class="article-head">
                <div class="title">{{ currentNav.title }}</div>
                <div class="edit-link">
                    {{ do {
                        const results = _$('如果你发现文档有问题，请帮忙在%上修正该文档').split('%');
                        results.splice(1, 0, (
                            <a target="_blank" 
                                href={{ `https://github.com/ksc-fe/kpc/blob/master/${currentNav.path}` }}
                            >github</a>
                        ));
                        results
                    } }}
                </div>
            </div>
            <Article ref="article" />
        </article>
        <div class="table-of-contents" v-if={{ demos }}
            ref="tableContents"
        >
            <div v-if={{ demos.length > 0 }} class="aside-border-nav"></div>
            <ul>
                <li v-for={{ demos }}
                    class={{ {
                        "c-ellipsis-dot": true,
                        'active': self.get('activeExample') == value.data.index
                    } }}
                    ev-click={{ self._scrollToView.bind(self, value) }}
                >
                    {{ do {
                        let title = value.data.setting.title;
                        if (typeof title === 'object') {
                            title[language];
                        } else {
                            title;
                        }
                    } }}
                </li>
            </ul>
            <div v-if={{ false }} class="aside-border transition" style={{ self.get('borderStyle') }}></div>
            <div class="aside-dot transition" style={{ self.get('borderStyle') || 'display:none' }}></div>
        </div>
    </b:content>
</t:parent>
