{
    "setting": {
        "title": "Vue中使用",
        "order": 1,
        "sidebar": "doc"
    },
    "catalogs": [],
    "contents": "<p>使kpc运行在Vue框架中，我们只需要引入Vue兼容层<a href=\"https://github.com/Javey/intact-vue\">intact-vue</a>即可</p>\n<h1 id='header-%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E'>语法说明</h1><p>intact-vue从底层vNode上做了intact到vue的兼容，文档中针对intact的例子，我们只需要做以下写法上的转换即可</p>\n<div class=\"k-table k-border\">\n                    <div class=\"k-table-wrapper\">\n                        <div class=\"k-thead\">\n                            <table>\n                                <thead><tr>\n<th>类别</th>\n<th>intact写法</th>\n<th>vue写法</th>\n</tr>\n</thead>\n                            </table>\n                        </div>\n                        <div class=\"k-tbody\">\n                            <table>\n                                <tbody><tr>\n<td>事件</td>\n<td><code>ev-click</code></td>\n<td><code>@click</code></td>\n</tr>\n<tr>\n<td>事件回调传参</td>\n<td><code>ev-click={{ self.onClick.bind(self, data) }}</code></td>\n<td><code>@click=&quot;onClick(data)&quot;</code></td>\n</tr>\n<tr>\n<td>属性</td>\n<td><code>name={{ self.get(&#39;name&#39;) }}</code></td>\n<td><code>:name=&quot;name&quot;</code></td>\n</tr>\n<tr>\n<td>block</td>\n<td><code>&lt;b:header&gt;header&lt;/b:header&gt;</code></td>\n<td><code>&lt;template slot=&quot;header&quot;&gt;header&lt;/template&gt;</code></td>\n</tr>\n<tr>\n<td>block parent()</td>\n<td><code>&lt;b:header&gt;{{ parent() }}header&lt;/b:header&gt;</code></td>\n<td>vue不支持<code>parent</code>引用父组件中定义的模板，你需要直接拷贝父组件定义的模板</td>\n</tr>\n<tr>\n<td>带参数的block</td>\n<td><code>&lt;Transfer&gt;&lt;b:label params=&quot;data&quot;&gt;&lt;div&gt;{{ data.name }}&lt;/div&gt;&lt;/b:label&gt;&lt;/Transfer&gt;</code></td>\n<td><code>&lt;Transfer&gt;&lt;div slot=&quot;label&quot; slot-scope=&quot;data&quot;&gt;{{ data.name }}&lt;/div&gt;&lt;/Transfer&gt;</code></td>\n</tr>\n<tr>\n<td>双向绑定任意属性 <code>@since intact-vue@0.3.7</code></td>\n<td><code>v-model:name=&quot;name&quot;</code></td>\n<td><code>:name.sync=&quot;name&quot;</code></td>\n</tr>\n</tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div><h2 id='header-%E4%B8%8D%E6%94%AF%E6%8C%81%E7%9A%84%E7%89%B9%E6%80%A7'>不支持的特性</h2><ol>\n<li>不支持事件的.native修饰符<pre><code class=\"hljs vue\"> &lt;<span class=\"hljs-selector-tag\">Button</span> @<span class=\"hljs-keyword\">click</span>.<span class=\"hljs-keyword\">native</span>=\"<span class=\"hljs-keyword\">click</span>\"&gt;<span class=\"hljs-keyword\">default</span>&lt;/<span class=\"hljs-keyword\">Button</span>&gt;\n</code></pre>\n</li>\n<li>多余的属性不会被自动添加到组件渲染的DOM上，而是被直接忽略</li>\n<li>不支持scoped style，因为KPC组件渲染不会添加data-v-id<pre><code class=\"hljs vue\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"css\"> <span class=\"hljs-selector-class\">.k-btn</span> { <span class=\"hljs-attribute\">color</span>: red;  } </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></pre>\n</li>\n<li>不支持 <a href=\"https://vuejs.org/v2/guide/class-and-style.html#Multiple-Values\">Multiple values</a> style<pre><code class=\"hljs vue\"><span class=\"xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">v-bind:style</span>=<span class=\"hljs-string\">\"</span></span></span><span class=\"hljs-template-variable\">{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n</code></pre>\n</li>\n<li>不要在KPC组件上直接做动画，如果要动画，可以包一层div<pre><code class=\"hljs vue\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"fade\"</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"show\"</span>&gt;</span>default<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span>\n</code></pre>\n 可以包一层div<pre><code class=\"hljs vue\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"fade\"</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"show\"</span>&gt;</span>\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>&gt;</span>default<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span>\n</code></pre>\n</li>\n</ol>\n<p>另外当需要在js中使用<code>h()</code>方法创建vNode，然后作为属性传给kpc组件时，需要使用<code>Intact.normalize()</code>方法将vNode包起来</p>\n<blockquote>\n<p>如果是作为子元素<code>children</code>，则没有必要<code>normalize</code>，因为兼容层默认会normalize子元素</p>\n</blockquote>\n<pre><code class=\"hljs vue\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span> <span class=\"hljs-attr\">:text</span>=<span class=\"hljs-string\">\"text\"</span>&gt;</span></span><span class=\"hljs-template-variable\">{{ children }}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> Intact <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'intact'</span>;\n<span class=\"hljs-keyword\">import</span> Badge <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/badge'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">components</span>: {\n        Badge\n    },\n    data() {\n        <span class=\"hljs-keyword\">const</span> h = <span class=\"hljs-keyword\">this</span>.$createElement;\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-comment\">// 作为属性，需要normalize</span>\n            text: Intact.normalize(h(<span class=\"hljs-string\">'div'</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'test'</span>)),\n            <span class=\"hljs-comment\">// 作为子元素，没有必要normalize</span>\n            children: h(<span class=\"hljs-string\">'div'</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'test'</span>)\n        }\n    }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<blockquote>\n<p><code>Table</code>组件的<code>scheme</code>属性中<code>template</code>字段返回的vNode无需<code>normalize</code>，因为组件内部做了兼容，不过多次调用<code>normalize</code>也没有问题。</p>\n</blockquote>\n<h1 id='header-%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96'>安装依赖</h1><pre><code class=\"hljs shell\">npm <span class=\"hljs-keyword\">install</span> intact intact-vue kpc <span class=\"hljs-comment\">--save</span>\n</code></pre>\n<h1 id='header-%E9%85%8D%E7%BD%AEwebpack.config.js'>配置<code>webpack.config.js</code></h1><p>和在intact中使用的配置类似，只需要设置<code>alias</code>让<code>intact</code>库指向<code>intact-vue</code>兼容层</p>\n<pre><code class=\"hljs js\">module.exports = {\n    ...\n    resolve: {\n        alias: {\n            <span class=\"hljs-string\">'intact$'</span>: <span class=\"hljs-string\">'intact-vue'</span>,\n        }\n    }\n}\n</code></pre>\n<h1 id='header-%E5%85%A8%E9%87%8F%E5%BC%95%E5%85%A5'>全量引入</h1><p>全量引入使用vue提供的<code>use</code>方法，一次性注册所有组件</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>;\n<span class=\"hljs-keyword\">import</span> Kpc <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc'</span>;\n\nVue.use(Kpc);\n</code></pre>\n<blockquote>\n<p>Vue不能使用<code>Switch</code>作为组件名，所以所有的组件命名为<code>KComponent</code>形式，例如：<code>KButton</code>，全量安装后，你可以在模板中使用<code>KButton</code>或者<code>k-button</code>作为元素名</p>\n</blockquote>\n<h1 id='header-%E6%8C%89%E9%9C%80%E5%BC%95%E5%85%A5'>按需引入</h1><p>按需引入只需要在用到该组件才引入，可以最小化减小打包文件的体积</p>\n<pre><code class=\"hljs vue\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"hello\"</span>&gt;</span>Hello World<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> Button <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/button'</span>;\n<span class=\"hljs-keyword\">import</span> Message <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/message'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">components</span>: {\n        Button\n    },\n\n    <span class=\"hljs-attr\">methods</span>: {\n        hello() {\n            Message.success(<span class=\"hljs-string\">'Welcome to kpc world!'</span>);\n        }\n    }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n",
    "index": 89
}