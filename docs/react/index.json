{
    "setting": {
        "title": "React中使用",
        "order": 1.1,
        "sidebar": "doc"
    },
    "catalogs": [],
    "contents": "<p>使kpc运行在React框架中，我们只需要引入React兼容层<a href=\"https://github.com/ksc-fe/intact-react\">intact-react</a>即可</p>\n<h1 id='header-%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E'>语法说明</h1><p>文档中针对intact的例子，我们只需要做以下写法上的转换即可</p>\n<div class=\"k-table k-border\">\n                    <div class=\"k-table-wrapper\">\n                        <div class=\"k-thead\">\n                            <table>\n                                <thead><tr>\n<th>类别</th>\n<th>intact写法</th>\n<th>react写法</th>\n<th>说明</th>\n</tr>\n</thead>\n                            </table>\n                        </div>\n                        <div class=\"k-tbody\">\n                            <table>\n                                <tbody><tr>\n<td>事件</td>\n<td><code>ev-click</code></td>\n<td><code>onClick</code></td>\n<td>保留React事件命名风格，<code>on</code> + 事件名首字母大写</td>\n</tr>\n<tr>\n<td>默认事件</td>\n<td><code>ev-$change:value</code></td>\n<td><code>on$change-value</code></td>\n<td>React属性名不支持冒号(:)，改为连字符(-)即可</td>\n</tr>\n<tr>\n<td>事件回调传参</td>\n<td><code>ev-click={{ self.onClick.bind(self, data) }}</code></td>\n<td><code>onClick={this.onClick.bind(this, data)}</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>属性</td>\n<td><code>name={{ self.get(&#39;name&#39;) }}</code></td>\n<td><code>name={this.state.name}</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>block</td>\n<td><code>&lt;Dialog&gt;&lt;b:header&gt;&lt;div&gt;header&lt;/div&gt;&lt;/b:header&gt;&lt;/Dialog&gt;</code></td>\n<td><code>&lt;Dialog b-header={&lt;div&gt;header&lt;/div&gt;} /&gt;</code></td>\n<td><code>b:header</code>block对应React的属性<code>b-header</code></td>\n</tr>\n<tr>\n<td>block parent()</td>\n<td><code>&lt;b:header&gt;{{ parent() }}header&lt;/b:header&gt;</code></td>\n<td>不支持引用父组件定义的内容</td>\n<td>-</td>\n</tr>\n<tr>\n<td>带参数的block</td>\n<td><code>&lt;Transfer&gt;&lt;b:label params=&quot;data&quot;&gt;&lt;div&gt;{{ data.name }}&lt;/div&gt;&lt;/b:label&gt;&lt;/Transfer&gt;</code></td>\n<td><code>&lt;Transfer b-label={(data) =&gt; &lt;div&gt;{data.name}&lt;/div&gt;} /&gt;</code></td>\n<td><code>b-lablel</code>属性值为函数</td>\n</tr>\n<tr>\n<td>双向绑定任意属性 <code>@since intact-vue@0.3.7</code></td>\n<td><code>v-model:name=&quot;name&quot;</code></td>\n<td><code>on$change-name={(c, v) =&gt; this.setState({name: v})} name={this.state.name}</code></td>\n<td>React不支持<code>v-model</code>语法糖，改为属性和事件的方式即可</td>\n</tr>\n</tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div><p>另外当需要将vNode作为属性传给kpc组件时，需要使用<code>Intact.normalize()</code>方法处理vNode</p>\n<blockquote>\n<p>如果是作为子元素<code>children</code>，则没有必要<code>normalize</code>，因为兼容层默认会normalize子元素</p>\n</blockquote>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">React</span> from <span class=\"hljs-symbol\">'reac</span>t';\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Intact</span> from <span class=\"hljs-symbol\">'intac</span>t';\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Badge</span> from <span class=\"hljs-symbol\">'kpc</span>/components/badge';\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n    render() {\n        <span class=\"hljs-keyword\">return</span> (\n            <span class=\"hljs-comment\">// 作为属性，需要normalize</span>\n            &lt;<span class=\"hljs-type\">Badge</span> text={<span class=\"hljs-type\">Intact</span>.normalize(&lt;div&gt;test&lt;/div&gt;)}&gt;\n                &lt;div&gt;test&lt;/div&gt;\n            &lt;/<span class=\"hljs-type\">Badge</span>&gt;\n        )\n    }\n}\n</code></pre>\n<blockquote>\n<p><code>Table</code>组件的<code>scheme</code>属性中<code>template</code>字段返回的vNode无需<code>normalize</code>，因为组件内部做了兼容，不过多次调用<code>normalize</code>也没有问题。</p>\n</blockquote>\n<h1 id='header-%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96'>安装依赖</h1><pre><code class=\"hljs shell\">npm <span class=\"hljs-keyword\">install</span> intact intact-react kpc <span class=\"hljs-comment\">--save</span>\n</code></pre>\n<h1 id='header-%E9%85%8D%E7%BD%AEwebpack.config.js'>配置<code>webpack.config.js</code></h1><p>和在intact中使用的配置类似，只需要设置<code>alias</code>让<code>intact</code>库指向<code>intact-react</code>兼容层</p>\n<pre><code class=\"hljs js\">module.exports = {\n    ...\n    resolve: {\n        alias: {\n            <span class=\"hljs-string\">'intact$'</span>: <span class=\"hljs-string\">'intact-react'</span>,\n        }\n    }\n}\n</code></pre>\n<h1 id='header-%E4%BD%BF%E7%94%A8'>使用</h1><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">React</span> from <span class=\"hljs-symbol\">'reac</span>t';\n<span class=\"hljs-keyword\">import</span> {<span class=\"hljs-type\">Button</span>} from <span class=\"hljs-symbol\">'kpc</span>/components/button';\n<span class=\"hljs-keyword\">import</span> {<span class=\"hljs-type\">Message</span>} from <span class=\"hljs-symbol\">'kpc</span>/components/message';\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n    hello() {\n        <span class=\"hljs-type\">Message</span>.success(<span class=\"hljs-symbol\">'Welcome</span> to kpc world!');\n    }\n    render() {\n        <span class=\"hljs-keyword\">return</span> &lt;<span class=\"hljs-type\">Button</span> onClick={<span class=\"hljs-keyword\">this</span>.hello}&gt;<span class=\"hljs-type\">Hello</span> <span class=\"hljs-type\">World</span>&lt;/<span class=\"hljs-type\">Button</span>&gt;\n    }\n}\n</code></pre>\n",
    "index": 95
}